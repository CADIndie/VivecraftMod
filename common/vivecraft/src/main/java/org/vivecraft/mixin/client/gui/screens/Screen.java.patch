--- a/net/minecraft/client/gui/screens/Screen.java
+++ b/net/minecraft/client/gui/screens/Screen.java
@@ -16,6 +16,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.nio.file.Path;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
@@ -31,6 +32,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.chat.NarratorChatListener;
+import net.minecraft.client.gui.components.AbstractWidget;
 import net.minecraft.client.gui.components.Widget;
 import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
@@ -51,6 +53,9 @@
 import net.minecraft.world.inventory.tooltip.TooltipComponent;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.TooltipFlag;
+import net.optifine.reflect.Reflector;
+import net.optifine.util.GuiUtils;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -68,7 +73,8 @@
     protected ItemRenderer itemRenderer;
     public int width;
     public int height;
-    private final List<Widget> renderables = Lists.newArrayList();
+    //vivecraft idk why this was private...
+    protected final List<Widget> renderables = Lists.newArrayList();
     public boolean passEvents;
     protected Font font;
     @Nullable
@@ -184,6 +190,19 @@
 
     protected void renderTooltip(PoseStack pPoseStack, ItemStack pTooltips, int pMouseX, int pMouseY)
     {
+    	//TODO: fix
+    	if (Reflector.GuiUtils.exists())
+    	{
+//    		Reflector.call(Reflector.GuiUtils_preItemToolTip, pTooltips);
+//    		Font font = (Font)Reflector.call(pTooltips.getItem(), Reflector.IForgeItem_getFontRenderer, pTooltips);
+//    		this.renderTooltip(pMatrixStack, Lists.transform(this.getTooltipFromItem(pTooltips), Component::getVisualOrderText), pMouseX, pMouseY, font == null ? this.font : font);
+//    		Reflector.call(Reflector.GuiUtils_postItemToolTip);
+    	}
+    	else
+    	{
+    	//	this.renderComponentTooltip(pMatrixStack, this.getTooltipFromItem(pTooltips), pMouseX, pMouseY);
+    	}
+    	
         this.renderTooltip(pPoseStack, this.getTooltipFromItem(pTooltips), pTooltips.getTooltipImage(), pMouseX, pMouseY);
     }
 
@@ -209,7 +228,16 @@
 
     public void renderComponentTooltip(PoseStack pPoseStack, List<Component> pTooltips, int pMouseX, int pMouseY)
     {
-        this.renderTooltip(pPoseStack, Lists.transform(pTooltips, Component::getVisualOrderText), pMouseX, pMouseY);
+    	if (Reflector.GuiUtils.exists())
+    	{
+    		//this.renderWrappedToolTip(p_96598_, p_96599_, p_96600_, p_96601_, this.font);
+    	}
+    	else
+    	{
+    		this.renderTooltip(pPoseStack, Lists.transform(pTooltips, Component::getVisualOrderText), pMouseX, pMouseY);
+    	}
+    	
+        //this.renderTooltip(pPoseStack, Lists.transform(pTooltips, Component::getVisualOrderText), pMouseX, pMouseY);
     }
 
     public void renderTooltip(PoseStack pPoseStack, List <? extends FormattedCharSequence > pTooltips, int pMouseX, int pMouseY)
@@ -435,6 +463,10 @@
 
     public void sendMessage(String pText, boolean pAddToChat)
     {
+    	if (Reflector.ForgeEventFactory_onClientSendMessage.exists())
+        {
+            pText = Reflector.callString(Reflector.ForgeEventFactory_onClientSendMessage, pText);
+        }
         if (pAddToChat)
         {
             this.minecraft.gui.getChat().addRecentChat(pText);
@@ -450,9 +482,14 @@
         this.font = pMinecraft.font;
         this.width = pWidth;
         this.height = pHeight;
-        this.clearWidgets();
-        this.setFocused((GuiEventListener)null);
-        this.init();
+        //TODO: fix
+        //if (!Reflector.postForgeBusEvent(Reflector.InitGuiEvent_Pre_Constructor, this, this.buttons, consumer1, consumer))
+        //{
+            this.clearWidgets();
+            this.setFocused((GuiEventListener)null);
+            this.init();
+        //}
+        //Reflector.postForgeBusEvent(Reflector.InitGuiEvent_Post_Constructor, this, this.buttons, consumer1, consumer);
         this.triggerImmediateNarration(false);
         this.suppressNarration(NARRATE_SUPPRESS_AFTER_INIT_TIME);
     }
@@ -483,7 +520,16 @@
     {
         if (this.minecraft.level != null)
         {
+            if (this.dataholder.vrSettings != null && !this.dataholder.vrSettings.menuBackground)
+            {
+                this.fillGradient(pPoseStack, 0, 0, this.width, this.height, 0, 0);
+            }
+            else
+            {
             this.fillGradient(pPoseStack, 0, 0, this.width, this.height, -1072689136, -804253680);
+            }
+
+            Reflector.postForgeBusEvent(Reflector.BackgroundDrawnEvent_Constructor, this, pPoseStack);
         }
         else
         {
@@ -505,6 +551,7 @@
         bufferbuilder.vertex((double)this.width, 0.0D, 0.0D).uv((float)this.width / 32.0F, (float)pVOffset).color(64, 64, 64, 255).endVertex();
         bufferbuilder.vertex(0.0D, 0.0D, 0.0D).uv(0.0F, (float)pVOffset).color(64, 64, 64, 255).endVertex();
         tesselator.end();
+        Reflector.postForgeBusEvent(Reflector.BackgroundDrawnEvent_Constructor, this, new PoseStack());
     }
 
     public boolean isPauseScreen()
@@ -770,4 +817,60 @@
             this.priority = pPriority;
         }
     }
+
+    public Minecraft getMinecraft()
+    {
+        return this.minecraft;
+    }
+    
+    //Vivecraft / OF
+    protected List<AbstractWidget> getButtonList()
+    {
+        List<AbstractWidget> list = new ArrayList<>();
+
+        for (GuiEventListener guieventlistener : this.children())
+        {
+            if (guieventlistener instanceof AbstractWidget)
+            {
+                list.add((AbstractWidget)guieventlistener);
+            }
+        }
+
+        return list;
+    }
+    
+    protected AbstractWidget getSelectedButton(int x, int y)
+    {
+        for (AbstractWidget butt : getButtonList())
+        {
+            if (butt.visible && butt.isHoveredOrFocused())
+            {
+                return butt;
+            }
+        }
+
+        return null;
+    }
+    
+    public static AbstractWidget getSelectedButton(int x, int y, List<AbstractWidget> listButtons)
+    {
+        for (int i = 0; i < listButtons.size(); ++i)
+        {
+            AbstractWidget abstractwidget = listButtons.get(i);
+
+            if (abstractwidget.visible)
+            {
+                int j = GuiUtils.getWidth(abstractwidget);
+                int k = GuiUtils.getHeight(abstractwidget);
+
+                if (x >= abstractwidget.x && y >= abstractwidget.y && x < abstractwidget.x + j && y < abstractwidget.y + k)
+                {
+                    return abstractwidget;
+                }
+            }
+        }
+
+        return null;
+    }
+    //
 }

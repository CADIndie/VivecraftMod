--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -21,6 +21,7 @@
 import net.minecraft.Util;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
+import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener;
@@ -28,7 +29,10 @@
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Blocks;
+import net.optifine.reflect.Reflector;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -70,6 +74,25 @@
             }
         }
 
+        //VIVECRAFT - This prolly cant stay here. Move to .json files someday.
+        ItemStack is = new ItemStack(Items.LEATHER_BOOTS);
+        is.setHoverName(Component.translatable("vivecraft.item.jumpboots"));
+        is.getOrCreateTag().putBoolean("Unbreakable", true);
+        is.getOrCreateTag().putInt("HideFlags",4);
+
+        ItemStack is2 = new ItemStack(Items.SHEARS);
+        is2.setHoverName(Component.translatable("vivecraft.item.climbclaws"));
+        is2.getOrCreateTag().putBoolean("Unbreakable", true);
+        is2.getOrCreateTag().putInt("HideFlags",4);
+
+        ShapedRecipe boot = new ShapedRecipe(new ResourceLocation("jumpboots"),"Vivecraft", 1, 2, NonNullList.a(Ingredient.EMPTY,Ingredient.a(Items.LEATHER_BOOTS), Ingredient.a(new ItemStack(Blocks.SLIME_BLOCK))), is);
+        ShapedRecipe claw = new ShapedRecipe(new ResourceLocation("climbclaws"),"Vivecraft", 3, 2, NonNullList.a(Ingredient.EMPTY,Ingredient.a(Items.SPIDER_EYE),Ingredient.EMPTY,Ingredient.a(Items.SPIDER_EYE),Ingredient.a(Items.SHEARS),Ingredient.EMPTY,Ingredient.a(Items.SHEARS)), is2);
+
+        if (map.containsKey(boot.getType())) {
+            map.get(boot.getType()).put(boot.getId(), boot);
+            map.get(claw.getType()).put(claw.getId(), claw);
+        }
+
         this.recipes = map.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (p_44033_) ->
         {
             return p_44033_.getValue().build();

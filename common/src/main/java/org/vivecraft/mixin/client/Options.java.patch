--- a/net/minecraft/client/Options.java
+++ b/net/minecraft/client/Options.java
@@ -202,6 +202,7 @@
     public float fovEffectScale = 1.0F;
     public double gamma;
     public int guiScale;
+    public int guiScaleUser;
     public ParticleStatus particles = ParticleStatus.ALL;
     public NarratorStatus narratorStatus = NarratorStatus.OFF;
     public String languageCode = "en_us";
@@ -214,7 +215,7 @@
     public boolean ofSmoothFps = false;
     public boolean ofSmoothWorld = Config.isSingleProcessor();
     public boolean ofLazyChunkLoading = Config.isSingleProcessor();
-    public boolean ofRenderRegions = false;
+    public boolean ofRenderRegions = true;
     public boolean ofSmartAnimations = false;
     public double ofAoLevel = 1.0D;
     public int ofAaLevel = 0;
@@ -251,7 +252,7 @@
     public boolean ofFastRender = false;
     public boolean ofDynamicFov = true;
     public boolean ofAlternateBlocks = true;
-    public int ofDynamicLights = 3;
+    public int ofDynamicLights = 2;
     public boolean ofCustomEntityModels = true;
     public boolean ofCustomGuis = true;
     public boolean ofShowGlErrors = true;
@@ -331,6 +332,7 @@
         this.ofKeyBindZoom = new KeyMapping("of.key.zoom", 67, "key.categories.misc");
         this.keyMappings = ArrayUtils.add(this.keyMappings, this.ofKeyBindZoom);
         KeyUtils.fixKeyConflicts(this.keyMappings, new KeyMapping[] {this.ofKeyBindZoom});
+        this.keyMappings = this.minecraft.vr.initializeBindings(this.keyMappings);
         this.renderDistance = 8;
         this.load();
         Config.initGameSettings(this);
@@ -398,7 +400,9 @@
         this.renderDistance = (int)Mth.clamp((double)p_168428_.process("renderDistance", this.renderDistance), Option.RENDER_DISTANCE.getMinValue(), Option.RENDER_DISTANCE.getMaxValue());
         this.simulationDistance = (int)Mth.clamp((double)p_168428_.process("simulationDistance", this.simulationDistance), Option.SIMULATION_DISTANCE.getMinValue(), Option.SIMULATION_DISTANCE.getMaxValue());
         this.entityDistanceScaling = p_168428_.process("entityDistanceScaling", this.entityDistanceScaling);
-        this.guiScale = p_168428_.process("guiScale", this.guiScale);
+        //Vivecraft
+        this.guiScaleUser = p_168428_.process("guiScale", this.guiScaleUser);
+        //
         this.particles = p_168428_.process("particles", this.particles, ParticleStatus::byId, ParticleStatus::getId);
         this.framerateLimit = p_168428_.process("maxFps", this.framerateLimit);
 
@@ -834,9 +838,9 @@
 
                 printwriter.close();
             }
-            catch (Exception exception1)
+            catch (Exception exception)
             {
-                LOGGER.error("Failed to save options", (Throwable)exception1);
+                LOGGER.error("Failed to save options", (Throwable)exception);
             }
 
             this.saveOptions = false;
@@ -904,22 +908,22 @@
         return this.useNativeTransport;
     }
 
-    public void setOptionFloatValueOF(Option option, double val)
+    public void setOptionFloatValueOF(Option p_setOptionFloatValueOF_1_, double p_setOptionFloatValueOF_2_)
     {
-        if (option == Option.CLOUD_HEIGHT)
+        if (p_setOptionFloatValueOF_1_ == Option.CLOUD_HEIGHT)
         {
-            this.ofCloudsHeight = val;
+            this.ofCloudsHeight = p_setOptionFloatValueOF_2_;
         }
 
-        if (option == Option.AO_LEVEL)
+        if (p_setOptionFloatValueOF_1_ == Option.AO_LEVEL)
         {
-            this.ofAoLevel = val;
+            this.ofAoLevel = p_setOptionFloatValueOF_2_;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (option == Option.AA_LEVEL)
+        if (p_setOptionFloatValueOF_1_ == Option.AA_LEVEL)
         {
-            int i = (int)val;
+            int i = (int)p_setOptionFloatValueOF_2_;
 
             if (i > 0 && Config.isShaders())
             {
@@ -935,60 +939,61 @@
 
             this.ofAaLevel = i;
             this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
+            this.ofAaLevel = 0;
         }
 
-        if (option == Option.AF_LEVEL)
+        if (p_setOptionFloatValueOF_1_ == Option.AF_LEVEL)
         {
-            int j = (int)val;
+            int j = (int)p_setOptionFloatValueOF_2_;
             this.ofAfLevel = j;
             this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
             this.minecraft.delayTextureReload();
             Shaders.uninit();
         }
 
-        if (option == Option.MIPMAP_TYPE)
+        if (p_setOptionFloatValueOF_1_ == Option.MIPMAP_TYPE)
         {
-            int k = (int)val;
+            int k = (int)p_setOptionFloatValueOF_2_;
             this.ofMipmapType = Config.limit(k, 0, 3);
             this.updateMipmaps();
         }
     }
 
-    public double getOptionFloatValueOF(Option settingOption)
+    public double getOptionFloatValueOF(Option p_getOptionFloatValueOF_1_)
     {
-        if (settingOption == Option.CLOUD_HEIGHT)
+        if (p_getOptionFloatValueOF_1_ == Option.CLOUD_HEIGHT)
         {
             return this.ofCloudsHeight;
         }
-        else if (settingOption == Option.AO_LEVEL)
+        else if (p_getOptionFloatValueOF_1_ == Option.AO_LEVEL)
         {
             return this.ofAoLevel;
         }
-        else if (settingOption == Option.AA_LEVEL)
+        else if (p_getOptionFloatValueOF_1_ == Option.AA_LEVEL)
         {
             return (double)this.ofAaLevel;
         }
-        else if (settingOption == Option.AF_LEVEL)
+        else if (p_getOptionFloatValueOF_1_ == Option.AF_LEVEL)
         {
             return (double)this.ofAfLevel;
         }
-        else if (settingOption == Option.MIPMAP_TYPE)
+        else if (p_getOptionFloatValueOF_1_ == Option.MIPMAP_TYPE)
         {
             return (double)this.ofMipmapType;
         }
-        else if (settingOption == Option.FRAMERATE_LIMIT)
+        else if (p_getOptionFloatValueOF_1_ != Option.FRAMERATE_LIMIT)
         {
-            return (double)this.framerateLimit == Option.FRAMERATE_LIMIT.getMaxValue() && this.enableVsync ? 0.0D : (double)this.framerateLimit;
+            return (double)Float.MAX_VALUE;
         }
         else
         {
-            return (double)Float.MAX_VALUE;
+            return (double)this.framerateLimit == Option.FRAMERATE_LIMIT.getMaxValue() && this.enableVsync ? 0.0D : (double)this.framerateLimit;
         }
     }
 
-    public void setOptionValueOF(Option par1EnumOptions, int par2)
+    public void setOptionValueOF(Option p_setOptionValueOF_1_, int p_setOptionValueOF_2_)
     {
-        if (par1EnumOptions == Option.FOG_FANCY)
+        if (p_setOptionValueOF_1_ == Option.FOG_FANCY)
         {
             switch (this.ofFogType)
             {
@@ -1001,7 +1006,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.FOG_START)
+        if (p_setOptionValueOF_1_ == Option.FOG_START)
         {
             this.ofFogStart += 0.2F;
 
@@ -1011,18 +1016,18 @@
             }
         }
 
-        if (par1EnumOptions == Option.SMOOTH_FPS)
+        if (p_setOptionValueOF_1_ == Option.SMOOTH_FPS)
         {
             this.ofSmoothFps = !this.ofSmoothFps;
         }
 
-        if (par1EnumOptions == Option.SMOOTH_WORLD)
+        if (p_setOptionValueOF_1_ == Option.SMOOTH_WORLD)
         {
             this.ofSmoothWorld = !this.ofSmoothWorld;
             Config.updateThreadPriorities();
         }
 
-        if (par1EnumOptions == Option.CLOUDS)
+        if (p_setOptionValueOF_1_ == Option.CLOUDS)
         {
             ++this.ofClouds;
 
@@ -1034,13 +1039,13 @@
             this.updateRenderClouds();
         }
 
-        if (par1EnumOptions == Option.TREES)
+        if (p_setOptionValueOF_1_ == Option.TREES)
         {
             this.ofTrees = nextValue(this.ofTrees, OF_TREES_VALUES);
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.RAIN)
+        if (p_setOptionValueOF_1_ == Option.RAIN)
         {
             ++this.ofRain;
 
@@ -1050,7 +1055,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.ANIMATED_WATER)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_WATER)
         {
             ++this.ofAnimatedWater;
 
@@ -1065,7 +1070,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.ANIMATED_LAVA)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_LAVA)
         {
             ++this.ofAnimatedLava;
 
@@ -1080,92 +1085,92 @@
             }
         }
 
-        if (par1EnumOptions == Option.ANIMATED_FIRE)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_FIRE)
         {
             this.ofAnimatedFire = !this.ofAnimatedFire;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_PORTAL)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_PORTAL)
         {
             this.ofAnimatedPortal = !this.ofAnimatedPortal;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_REDSTONE)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_REDSTONE)
         {
             this.ofAnimatedRedstone = !this.ofAnimatedRedstone;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_EXPLOSION)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_EXPLOSION)
         {
             this.ofAnimatedExplosion = !this.ofAnimatedExplosion;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_FLAME)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_FLAME)
         {
             this.ofAnimatedFlame = !this.ofAnimatedFlame;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_SMOKE)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_SMOKE)
         {
             this.ofAnimatedSmoke = !this.ofAnimatedSmoke;
         }
 
-        if (par1EnumOptions == Option.VOID_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.VOID_PARTICLES)
         {
             this.ofVoidParticles = !this.ofVoidParticles;
         }
 
-        if (par1EnumOptions == Option.WATER_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.WATER_PARTICLES)
         {
             this.ofWaterParticles = !this.ofWaterParticles;
         }
 
-        if (par1EnumOptions == Option.PORTAL_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.PORTAL_PARTICLES)
         {
             this.ofPortalParticles = !this.ofPortalParticles;
         }
 
-        if (par1EnumOptions == Option.POTION_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.POTION_PARTICLES)
         {
             this.ofPotionParticles = !this.ofPotionParticles;
         }
 
-        if (par1EnumOptions == Option.FIREWORK_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.FIREWORK_PARTICLES)
         {
             this.ofFireworkParticles = !this.ofFireworkParticles;
         }
 
-        if (par1EnumOptions == Option.DRIPPING_WATER_LAVA)
+        if (p_setOptionValueOF_1_ == Option.DRIPPING_WATER_LAVA)
         {
             this.ofDrippingWaterLava = !this.ofDrippingWaterLava;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_TERRAIN)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_TERRAIN)
         {
             this.ofAnimatedTerrain = !this.ofAnimatedTerrain;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_TEXTURES)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_TEXTURES)
         {
             this.ofAnimatedTextures = !this.ofAnimatedTextures;
         }
 
-        if (par1EnumOptions == Option.RAIN_SPLASH)
+        if (p_setOptionValueOF_1_ == Option.RAIN_SPLASH)
         {
             this.ofRainSplash = !this.ofRainSplash;
         }
 
-        if (par1EnumOptions == Option.LAGOMETER)
+        if (p_setOptionValueOF_1_ == Option.LAGOMETER)
         {
             this.ofLagometer = !this.ofLagometer;
         }
 
-        if (par1EnumOptions == Option.SHOW_FPS)
+        if (p_setOptionValueOF_1_ == Option.SHOW_FPS)
         {
             this.ofShowFps = !this.ofShowFps;
         }
 
-        if (par1EnumOptions == Option.AUTOSAVE_TICKS)
+        if (p_setOptionValueOF_1_ == Option.AUTOSAVE_TICKS)
         {
             int i = 900;
             this.ofAutoSaveTicks = Math.max(this.ofAutoSaveTicks / i * i, i);
@@ -1177,7 +1182,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.BETTER_GRASS)
+        if (p_setOptionValueOF_1_ == Option.BETTER_GRASS)
         {
             ++this.ofBetterGrass;
 
@@ -1189,7 +1194,7 @@
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.CONNECTED_TEXTURES)
+        if (p_setOptionValueOF_1_ == Option.CONNECTED_TEXTURES)
         {
             ++this.ofConnectedTextures;
 
@@ -1208,27 +1213,27 @@
             }
         }
 
-        if (par1EnumOptions == Option.WEATHER)
+        if (p_setOptionValueOF_1_ == Option.WEATHER)
         {
             this.ofWeather = !this.ofWeather;
         }
 
-        if (par1EnumOptions == Option.SKY)
+        if (p_setOptionValueOF_1_ == Option.SKY)
         {
             this.ofSky = !this.ofSky;
         }
 
-        if (par1EnumOptions == Option.STARS)
+        if (p_setOptionValueOF_1_ == Option.STARS)
         {
             this.ofStars = !this.ofStars;
         }
 
-        if (par1EnumOptions == Option.SUN_MOON)
+        if (p_setOptionValueOF_1_ == Option.SUN_MOON)
         {
             this.ofSunMoon = !this.ofSunMoon;
         }
 
-        if (par1EnumOptions == Option.VIGNETTE)
+        if (p_setOptionValueOF_1_ == Option.VIGNETTE)
         {
             ++this.ofVignette;
 
@@ -1238,7 +1243,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.CHUNK_UPDATES)
+        if (p_setOptionValueOF_1_ == Option.CHUNK_UPDATES)
         {
             ++this.ofChunkUpdates;
 
@@ -1248,12 +1253,12 @@
             }
         }
 
-        if (par1EnumOptions == Option.CHUNK_UPDATES_DYNAMIC)
+        if (p_setOptionValueOF_1_ == Option.CHUNK_UPDATES_DYNAMIC)
         {
             this.ofChunkUpdatesDynamic = !this.ofChunkUpdatesDynamic;
         }
 
-        if (par1EnumOptions == Option.TIME)
+        if (p_setOptionValueOF_1_ == Option.TIME)
         {
             ++this.ofTime;
 
@@ -1263,119 +1268,119 @@
             }
         }
 
-        if (par1EnumOptions == Option.PROFILER)
+        if (p_setOptionValueOF_1_ == Option.PROFILER)
         {
             this.ofProfiler = !this.ofProfiler;
         }
 
-        if (par1EnumOptions == Option.BETTER_SNOW)
+        if (p_setOptionValueOF_1_ == Option.BETTER_SNOW)
         {
             this.ofBetterSnow = !this.ofBetterSnow;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.SWAMP_COLORS)
+        if (p_setOptionValueOF_1_ == Option.SWAMP_COLORS)
         {
             this.ofSwampColors = !this.ofSwampColors;
             CustomColors.updateUseDefaultGrassFoliageColors();
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.RANDOM_ENTITIES)
+        if (p_setOptionValueOF_1_ == Option.RANDOM_ENTITIES)
         {
             this.ofRandomEntities = !this.ofRandomEntities;
             RandomEntities.update();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_FONTS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_FONTS)
         {
             this.ofCustomFonts = !this.ofCustomFonts;
             FontUtils.reloadFonts();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_COLORS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_COLORS)
         {
             this.ofCustomColors = !this.ofCustomColors;
             CustomColors.update();
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_ITEMS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_ITEMS)
         {
             this.ofCustomItems = !this.ofCustomItems;
             this.minecraft.delayTextureReload();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_SKY)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_SKY)
         {
             this.ofCustomSky = !this.ofCustomSky;
             CustomSky.update();
         }
 
-        if (par1EnumOptions == Option.SHOW_CAPES)
+        if (p_setOptionValueOF_1_ == Option.SHOW_CAPES)
         {
             this.ofShowCapes = !this.ofShowCapes;
         }
 
-        if (par1EnumOptions == Option.NATURAL_TEXTURES)
+        if (p_setOptionValueOF_1_ == Option.NATURAL_TEXTURES)
         {
             this.ofNaturalTextures = !this.ofNaturalTextures;
             NaturalTextures.update();
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.EMISSIVE_TEXTURES)
+        if (p_setOptionValueOF_1_ == Option.EMISSIVE_TEXTURES)
         {
             this.ofEmissiveTextures = !this.ofEmissiveTextures;
             this.minecraft.delayTextureReload();
         }
 
-        if (par1EnumOptions == Option.FAST_MATH)
+        if (p_setOptionValueOF_1_ == Option.FAST_MATH)
         {
             this.ofFastMath = !this.ofFastMath;
             Mth.fastMath = this.ofFastMath;
         }
 
-        if (par1EnumOptions == Option.FAST_RENDER)
+        if (p_setOptionValueOF_1_ == Option.FAST_RENDER)
         {
             this.ofFastRender = !this.ofFastRender;
         }
 
-        if (par1EnumOptions == Option.LAZY_CHUNK_LOADING)
+        if (p_setOptionValueOF_1_ == Option.LAZY_CHUNK_LOADING)
         {
             this.ofLazyChunkLoading = !this.ofLazyChunkLoading;
         }
 
-        if (par1EnumOptions == Option.RENDER_REGIONS)
+        if (p_setOptionValueOF_1_ == Option.RENDER_REGIONS)
         {
             this.ofRenderRegions = !this.ofRenderRegions;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.SMART_ANIMATIONS)
+        if (p_setOptionValueOF_1_ == Option.SMART_ANIMATIONS)
         {
             this.ofSmartAnimations = !this.ofSmartAnimations;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.DYNAMIC_FOV)
+        if (p_setOptionValueOF_1_ == Option.DYNAMIC_FOV)
         {
             this.ofDynamicFov = !this.ofDynamicFov;
         }
 
-        if (par1EnumOptions == Option.ALTERNATE_BLOCKS)
+        if (p_setOptionValueOF_1_ == Option.ALTERNATE_BLOCKS)
         {
             this.ofAlternateBlocks = !this.ofAlternateBlocks;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.DYNAMIC_LIGHTS)
+        if (p_setOptionValueOF_1_ == Option.DYNAMIC_LIGHTS)
         {
             this.ofDynamicLights = nextValue(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
             DynamicLights.removeLights(this.minecraft.levelRenderer);
         }
 
-        if (par1EnumOptions == Option.SCREENSHOT_SIZE)
+        if (p_setOptionValueOF_1_ == Option.SCREENSHOT_SIZE)
         {
             ++this.ofScreenshotSize;
 
@@ -1385,34 +1390,34 @@
             }
         }
 
-        if (par1EnumOptions == Option.CUSTOM_ENTITY_MODELS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_ENTITY_MODELS)
         {
             this.ofCustomEntityModels = !this.ofCustomEntityModels;
             this.minecraft.delayTextureReload();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_GUIS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_GUIS)
         {
             this.ofCustomGuis = !this.ofCustomGuis;
             CustomGuis.update();
         }
 
-        if (par1EnumOptions == Option.SHOW_GL_ERRORS)
+        if (p_setOptionValueOF_1_ == Option.SHOW_GL_ERRORS)
         {
             this.ofShowGlErrors = !this.ofShowGlErrors;
         }
 
-        if (par1EnumOptions == Option.HELD_ITEM_TOOLTIPS)
+        if (p_setOptionValueOF_1_ == Option.HELD_ITEM_TOOLTIPS)
         {
             this.heldItemTooltips = !this.heldItemTooltips;
         }
 
-        if (par1EnumOptions == Option.ADVANCED_TOOLTIPS)
+        if (p_setOptionValueOF_1_ == Option.ADVANCED_TOOLTIPS)
         {
             this.advancedItemTooltips = !this.advancedItemTooltips;
         }
 
-        if (par1EnumOptions == Option.CHAT_BACKGROUND)
+        if (p_setOptionValueOF_1_ == Option.CHAT_BACKGROUND)
         {
             if (this.ofChatBackground == 0)
             {
@@ -1428,7 +1433,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.CHAT_SHADOW)
+        if (p_setOptionValueOF_1_ == Option.CHAT_SHADOW)
         {
             this.ofChatShadow = !this.ofChatShadow;
         }
@@ -2341,16 +2346,19 @@
                         this.ofKeyBindZoom.setKey(InputConstants.getKey(astring[1]));
                     }
                 }
-                catch (Exception exception1)
+                catch (Exception exception)
                 {
                     Config.dbg("Skipping bad option: " + s);
-                    exception1.printStackTrace();
+                    exception.printStackTrace();
                 }
             }
 
             KeyUtils.fixKeyConflicts(this.keyMappings, new KeyMapping[] {this.ofKeyBindZoom});
             KeyMapping.resetMapping();
             bufferedreader.close();
+            this.ofFastRender = false;
+            this.ofAaLevel = 0;
+            this.ofAfLevel = 1;
         }
         catch (Exception exception11)
         {
@@ -2435,10 +2443,10 @@
             printwriter.println("key_" + this.ofKeyBindZoom.getName() + ":" + this.ofKeyBindZoom.saveString());
             printwriter.close();
         }
-        catch (Exception exception1)
+        catch (Exception exception)
         {
             Config.warn("Failed to save options");
-            exception1.printStackTrace();
+            exception.printStackTrace();
         }
     }
 
@@ -2500,7 +2508,7 @@
         this.renderClouds = CloudStatus.FANCY;
         this.fov = 70.0D;
         this.gamma = 0.0D;
-        this.guiScale = 0;
+        this.guiScaleUser = 0;
         this.particles = ParticleStatus.ALL;
         this.heldItemTooltips = true;
         this.forceUnicodeFont = false;
@@ -2514,7 +2522,7 @@
         Config.updateAvailableProcessors();
         this.ofSmoothWorld = Config.isSingleProcessor();
         this.ofLazyChunkLoading = false;
-        this.ofRenderRegions = false;
+        this.ofRenderRegions = true;
         this.ofFastMath = false;
         this.ofFastRender = false;
         this.ofDynamicFov = true;
@@ -2597,61 +2605,61 @@
         this.minecraft.delayTextureReload();
     }
 
-    public void setAllAnimations(boolean flag)
+    public void setAllAnimations(boolean p_setAllAnimations_1_)
     {
-        int i = flag ? 0 : 2;
+        int i = p_setAllAnimations_1_ ? 0 : 2;
         this.ofAnimatedWater = i;
         this.ofAnimatedLava = i;
-        this.ofAnimatedFire = flag;
-        this.ofAnimatedPortal = flag;
-        this.ofAnimatedRedstone = flag;
-        this.ofAnimatedExplosion = flag;
-        this.ofAnimatedFlame = flag;
-        this.ofAnimatedSmoke = flag;
-        this.ofVoidParticles = flag;
-        this.ofWaterParticles = flag;
-        this.ofRainSplash = flag;
-        this.ofPortalParticles = flag;
-        this.ofPotionParticles = flag;
-        this.ofFireworkParticles = flag;
-        this.particles = flag ? ParticleStatus.ALL : ParticleStatus.MINIMAL;
-        this.ofDrippingWaterLava = flag;
-        this.ofAnimatedTerrain = flag;
-        this.ofAnimatedTextures = flag;
+        this.ofAnimatedFire = p_setAllAnimations_1_;
+        this.ofAnimatedPortal = p_setAllAnimations_1_;
+        this.ofAnimatedRedstone = p_setAllAnimations_1_;
+        this.ofAnimatedExplosion = p_setAllAnimations_1_;
+        this.ofAnimatedFlame = p_setAllAnimations_1_;
+        this.ofAnimatedSmoke = p_setAllAnimations_1_;
+        this.ofVoidParticles = p_setAllAnimations_1_;
+        this.ofWaterParticles = p_setAllAnimations_1_;
+        this.ofRainSplash = p_setAllAnimations_1_;
+        this.ofPortalParticles = p_setAllAnimations_1_;
+        this.ofPotionParticles = p_setAllAnimations_1_;
+        this.ofFireworkParticles = p_setAllAnimations_1_;
+        this.particles = p_setAllAnimations_1_ ? ParticleStatus.ALL : ParticleStatus.MINIMAL;
+        this.ofDrippingWaterLava = p_setAllAnimations_1_;
+        this.ofAnimatedTerrain = p_setAllAnimations_1_;
+        this.ofAnimatedTextures = p_setAllAnimations_1_;
     }
 
-    private static int nextValue(int val, int[] vals)
+    private static int nextValue(int p_nextValue_0_, int[] p_nextValue_1_)
     {
-        int i = indexOf(val, vals);
+        int i = indexOf(p_nextValue_0_, p_nextValue_1_);
 
         if (i < 0)
         {
-            return vals[0];
+            return p_nextValue_1_[0];
         }
         else
         {
             ++i;
 
-            if (i >= vals.length)
+            if (i >= p_nextValue_1_.length)
             {
                 i = 0;
             }
 
-            return vals[i];
+            return p_nextValue_1_[i];
         }
     }
 
-    private static int limit(int val, int[] vals)
+    private static int limit(int p_limit_0_, int[] p_limit_1_)
     {
-        int i = indexOf(val, vals);
-        return i < 0 ? vals[0] : val;
+        int i = indexOf(p_limit_0_, p_limit_1_);
+        return i < 0 ? p_limit_1_[0] : p_limit_0_;
     }
 
-    private static int indexOf(int val, int[] vals)
+    private static int indexOf(int p_indexOf_0_, int[] p_indexOf_1_)
     {
-        for (int i = 0; i < vals.length; ++i)
+        for (int i = 0; i < p_indexOf_1_.length; ++i)
         {
-            if (vals[i] == val)
+            if (p_indexOf_1_[i] == p_indexOf_0_)
             {
                 return i;
             }

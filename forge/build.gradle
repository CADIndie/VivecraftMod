import net.fabricmc.loom.task.RemapJarTask

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "vivecraft.vr.mixins.json"
        mixinConfig "vivecraft.nonvr.mixins.json"
        mixinConfig "vivecraft.sodium.mixins.json"
        mixinConfig "vivecraft.forge.sodium.mixins.json"
        mixinConfig "vivecraft.iris.mixins.json"
        mixinConfig "vivecraft.rei.mixins.json"

        mixinConfig "vivecraft.vr.forge.mixins.json"
        mixinConfig "vivecraft.nonvr.forge.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    vrapi
    commonApi
    apicompileClasspath
    apiruntimeClasspath
}

sourceSets {
    vrapi {
        java {}
        resources {}
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    vrapi sourceSets.vrapi.output
    vrapi "net.minecraftforge:forge:${rootProject.forge_version}"
    commonApi(project(path: ":common", configuration: "api"))

    modRuntimeOnly("maven.modrinth:rubidium:0.6.1")
    modRuntimeOnly("maven.modrinth:oculus:1.19-1.2.5a")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier 'forge'
}

jar {
    classifier "dev"
}

task vrapiJar(type: Jar) {
    from sourceSets.vrapi.output
    from project(":common").sourceSets.vrapi.output
    classifier "api-forge-dev"
}

task remapVrApiJar(type: RemapJarTask) {
    input.set vrapiJar.archiveFile
    dependsOn vrapiJar
    classifier "api-forge"
}


sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
build.dependsOn remapVrApiJar

--- a/net/minecraft/client/gui/Gui.java
+++ b/net/minecraft/client/gui/Gui.java
@@ -7,10 +7,12 @@
 import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.blaze3d.vertex.VertexFormat;
+import com.mojang.blaze3d.vertex.VertexFormat.Mode;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.math.Vector3f;
 import java.util.Collection;
@@ -69,6 +71,7 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.food.FoodData;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
@@ -94,7 +97,7 @@
     private static final ResourceLocation VIGNETTE_LOCATION = new ResourceLocation("textures/misc/vignette.png");
     private static final ResourceLocation WIDGETS_LOCATION = new ResourceLocation("textures/gui/widgets.png");
     private static final ResourceLocation PUMPKIN_BLUR_LOCATION = new ResourceLocation("textures/misc/pumpkinblur.png");
-    private static final ResourceLocation SPYGLASS_SCOPE_LOCATION = new ResourceLocation("textures/misc/spyglass_scope.png");
+    public static final ResourceLocation SPYGLASS_SCOPE_LOCATION = new ResourceLocation("textures/misc/spyglass_scope.png");
     private static final ResourceLocation POWDER_SNOW_OUTLINE_LOCATION = new ResourceLocation("textures/misc/powder_snow_outline.png");
     private static final Component DEMO_EXPIRED_TEXT = Component.translatable("demo.demoExpired");
     private static final Component SAVING_TEXT = Component.translatable("menu.savingLevel");
@@ -142,7 +145,9 @@
     private float lastAutosaveIndicatorValue;
     private final Map<ChatType, List<ChatListener>> chatListeners = Maps.newHashMap();
     private float scopeScale;
-
+    //Vivecraft
+    public boolean showPlayerList;
+    
     public Gui(Minecraft pMinecraft)
     {
         this.minecraft = pMinecraft;
@@ -175,6 +180,8 @@
         this.titleFadeOutTime = 20;
     }
 
+    boolean nope = false;
+    boolean yup = false;
     public void render(PoseStack pPoseStack, float pPartialTick)
     {
         this.screenWidth = this.minecraft.getWindow().getGuiScaledWidth();
@@ -182,7 +189,7 @@
         Font font = this.getFont();
         RenderSystem.enableBlend();
 
-        if (Config.isVignetteEnabled())
+        if (nope) //no vignette
         {
             this.renderVignette(this.minecraft.getCameraEntity());
         }
@@ -196,7 +203,7 @@
         float f = this.minecraft.getDeltaFrameTime();
         this.scopeScale = Mth.lerp(0.5F * f, this.scopeScale, 1.125F);
 
-        if (this.minecraft.options.getCameraType().isFirstPerson())
+        if (nope) //none of this
         {
             if (this.minecraft.player.isScoping())
             {
@@ -214,14 +221,15 @@
             }
         }
 
-        if (this.minecraft.player.getTicksFrozen() > 0)
+        if (nope)
         {
+        	//i dunno what this is but it cant be good in VR
             this.renderTextureOverlay(POWDER_SNOW_OUTLINE_LOCATION, this.minecraft.player.getPercentFrozen());
         }
 
         float f2 = Mth.lerp(pPartialTick, this.minecraft.player.oPortalTime, this.minecraft.player.portalTime);
 
-        if (f2 > 0.0F && !this.minecraft.player.hasEffect(MobEffects.CONFUSION))
+        if (nope)
         {
             this.renderPortalOverlay(f2);
         }
@@ -241,7 +249,7 @@
             RenderSystem.setShader(GameRenderer::getPositionTexShader);
             RenderSystem.setShaderTexture(0, GUI_ICONS_LOCATION);
             RenderSystem.enableBlend();
-            this.renderCrosshair(pPoseStack);
+            if(nope)this.renderCrosshair(pPoseStack);
             RenderSystem.setShader(GameRenderer::getPositionTexShader);
             GlStateManager.enableAlphaTest();
             RenderSystem.defaultBlendFunc();
@@ -418,7 +426,27 @@
             {
                 this.displayScoreboardSidebar(pPoseStack, objective1);
             }
-
+            
+            //TODO: what is this block and is it needed.
+//			if (mc.currentScreen != null) {
+//				// VIVECRAFT: Dimming effect when in background
+//				float brightness = 0.5F;
+//				GlStateManager.enableBlend();
+//				RenderSystem.blendFuncSeparate(SourceFactor.ZERO, DestFactor.ONE, SourceFactor.ZERO, DestFactor.SRC_ALPHA);
+//				GlStateManager.disableTexture();
+//				GlStateManager.depthMask(false);
+//				Tessellator tessellator = Tessellator.getInstance();
+//				BufferBuilder bufferbuilder = tessellator.getBuffer();
+//				bufferbuilder.begin(GL11.GL_QUADS, DefaultVertexFormats.POSITION_COLOR);
+//				bufferbuilder.pos(0.0D, mc.currentScreen.height, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+//				bufferbuilder.pos(mc.currentScreen.width, mc.currentScreen.height, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+//				bufferbuilder.pos(mc.currentScreen.width, 0.0D, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+//				bufferbuilder.pos(0.0D, 0.0D, 990.0D).color(0.0F, 0.0F, 0.0F, brightness).endVertex();
+//				tessellator.draw();
+//				GlStateManager.depthMask(true);
+//				GlStateManager.enableTexture();
+//			}
+			
             RenderSystem.enableBlend();
             RenderSystem.defaultBlendFunc();
             pPoseStack.pushPose();
@@ -428,17 +456,17 @@
             this.minecraft.getProfiler().pop();
             pPoseStack.popPose();
             objective1 = scoreboard.getDisplayObjective(0);
-
-            if (this.minecraft.options.keyPlayerList.isDown() && (!this.minecraft.isLocalServer() || this.minecraft.player.connection.getOnlinePlayers().size() > 1 || objective1 != null))
+			//Vivecraft
+            if (!this.minecraft.options.keyPlayerList.isDown() && !this.showPlayerList || this.minecraft.isLocalServer() && this.minecraft.player.connection.getOnlinePlayers().size() <= 1 && objective1 == null)
             {
-                this.tabList.setVisible(true);
-                this.tabList.render(pPoseStack, this.screenWidth, scoreboard, objective1);
+                this.tabList.setVisible(false);
             }
             else
             {
-                this.tabList.setVisible(false);
+                this.tabList.setVisible(true);
+                this.tabList.render(pPoseStack, this.screenWidth, scoreboard, objective1);
             }
-
+			//
             this.renderSavingIndicator(pPoseStack);
         }
 
@@ -458,6 +486,7 @@
 
     private void renderCrosshair(PoseStack pPoseStack)
     {
+    	if (nope) return;
         Options options = this.minecraft.options;
 
         if (options.getCameraType().isFirstPerson() && (this.minecraft.gameMode.getPlayerMode() != GameType.SPECTATOR || this.canRenderCrosshairForSpectator(this.minecraft.hitResult)))
@@ -670,12 +699,36 @@
             this.setBlitOffset(-90);
             this.blit(pPoseStack, i - 91, this.screenHeight - 22, 0, 0, 182, 22);
             this.blit(pPoseStack, i - 91 - 1 + player.getInventory().selected * 20, this.screenHeight - 22 - 1, 0, 22, 24, 22);
-
-            if (!itemstack.isEmpty())
+            
+            //Vivecraft - render hotbar context selection.
+            if (this.minecraft.interactTracker.hotbar >= 0 && this.minecraft.interactTracker.hotbar < 9 && player.getInventory().selected != this.minecraft.interactTracker.hotbar)
+            {
+                RenderSystem.setShaderColor(0.0F, 1.0F, 0.0F, 1.0F);
+                this.blit(pPoseStack, i - 91 - 1 + this.minecraft.interactTracker.hotbar * 20, this.screenHeight - 22 - 1, 0, 22, 24, 22);
+                RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+            }
+            
+            //Vivecraft - touch hotbar offhand-slot-swap
+            if (!itemstack.isEmpty() || this.dataholder.vrSettings.vrTouchHotbar)
             {
                 if (humanoidarm == HumanoidArm.LEFT)
                 {
-                    this.blit(pPoseStack, i - 91 - 29, this.screenHeight - 23, 24, 22, 29, 24);
+                    if (this.minecraft.interactTracker.hotbar == 9)
+                    {
+                        RenderSystem.setShaderColor(0.0F, 0.0F, 1.0F, 1.0F);
+                        this.blit(pPoseStack, i - 91 - 29, this.screenHeight - 23, 24, 22, 29, 24);
+                        RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+                    }
+                    else
+                    {
+                        this.blit(pPoseStack, i - 91 - 29, this.screenHeight - 23, 24, 22, 29, 24);
+                    }
+                }
+                else if (this.minecraft.interactTracker.hotbar == 9)
+                {
+                    RenderSystem.setShaderColor(0.0F, 0.0F, 1.0F, 1.0F);
+                    this.blit(pPoseStack, i + 91, this.screenHeight - 23, 53, 22, 29, 24);
+                    RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
                 }
                 else
                 {
@@ -736,6 +789,7 @@
             }
 
             RenderSystem.disableBlend();
+            this.renderViveHudIcons(pPoseStack);
         }
     }
 
@@ -1251,6 +1305,7 @@
 
     private void renderTextureOverlay(ResourceLocation pTextureLocation, float pAlpha)
     {
+    	if (yup) return;
         RenderSystem.disableDepthTest();
         RenderSystem.depthMask(false);
         RenderSystem.defaultBlendFunc();
@@ -1272,6 +1327,7 @@
 
     private void renderSpyglassOverlay(float p_168676_)
     {
+    	if (yup) return;
         RenderSystem.disableDepthTest();
         RenderSystem.depthMask(false);
         RenderSystem.defaultBlendFunc();
@@ -1330,6 +1386,7 @@
 
     private void renderVignette(Entity pEntity)
     {
+    	if (yup) return;
         if (!Config.isVignetteEnabled())
         {
             RenderSystem.enableDepthTest();
@@ -1386,6 +1443,7 @@
 
     private void renderPortalOverlay(float pTimeInPortal)
     {
+    	if (yup) return;
         if (pTimeInPortal < 1.0F)
         {
             pTimeInPortal *= pTimeInPortal;
@@ -1719,4 +1777,101 @@
             return gui$hearttype;
         }
     }
+
+    private void renderViveHudIcons(PoseStack matrixstack)
+    {
+        if (this.minecraft.getCameraEntity() instanceof Player)
+        {
+            int i = this.minecraft.getWindow().getGuiScaledWidth();
+            int j = this.minecraft.getWindow().getGuiScaledHeight();
+            Font font = this.minecraft.gui.getFont();
+            Player player = (Player)this.minecraft.getCameraEntity();
+            int k = 0;
+            MobEffect mobeffect = null;
+
+            if (player.isSprinting())
+            {
+                mobeffect = MobEffects.MOVEMENT_SPEED;
+            }
+
+            if (player.isVisuallySwimming())
+            {
+                mobeffect = MobEffects.DOLPHINS_GRACE;
+            }
+
+            if (player.isShiftKeyDown())
+            {
+                mobeffect = MobEffects.BLINDNESS;
+            }
+
+            if (player.isFallFlying())
+            {
+                k = -1;
+            }
+
+            if (this.minecraft.crawlTracker.crawling)
+            {
+                k = -2;
+            }
+
+            int l = this.minecraft.getWindow().getGuiScaledWidth() / 2 - 109;
+            int i1 = this.minecraft.getWindow().getGuiScaledHeight() - 39;
+
+            if (k == -1)
+            {
+                this.minecraft.getItemRenderer().renderGuiItem(new ItemStack(Items.ELYTRA), l, i1);
+                mobeffect = null;
+            }
+            else if (k == -2)
+            {
+                if (player.isShiftKeyDown())
+                {
+                    l -= 19;
+                }
+                else
+                {
+                    mobeffect = null;
+                }
+
+                this.minecraft.getItemRenderer().renderGuiItem(new ItemStack(Items.RABBIT_FOOT), l, i1);
+            }
+
+            if (mobeffect != null)
+            {
+                TextureAtlasSprite textureatlassprite = this.minecraft.getMobEffectTextures().get(mobeffect);
+                RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+                RenderSystem.setShaderTexture(0, textureatlassprite.atlas().location());
+                GuiComponent.blit(matrixstack, l, i1, 0, 18, 18, textureatlassprite);
+            }
+        }
+    }
+
+    public void drawMouseMenuQuad(int mouseX, int mouseY)
+    {
+        RenderSystem.enableBlend();
+        GlStateManager.enableAlphaTest();
+        RenderSystem.disableDepthTest();
+        //uhhhh //RenderSystem.disableLighting();
+        RenderSystem.setShader(GameRenderer::getPositionTexShader);
+        RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+        RenderSystem.setShaderTexture(0, Screen.GUI_ICONS_LOCATION);
+        float f = 16.0F * this.dataholder.vrSettings.menuCrosshairScale;
+        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR, GlStateManager.DestFactor.ZERO, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+        this.drawCentredTexturedModalRect(mouseX, mouseY, f, f, 0, 0, 15, 15);
+        RenderSystem.disableBlend();
+    }
+
+    public void drawCentredTexturedModalRect(int centreX, int centreY, float width, float height, int u, int v, int texWidth, int texHeight)
+    {
+        float f = 0.00390625F;
+        float f1 = 0.00390625F;
+        BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+        bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
+        bufferbuilder.vertex((double)((float)centreX - width / 2.0F), (double)((float)centreY + height / 2.0F), (double)this.getBlitOffset()).uv((float)(u + 0) * f, (float)(v + texHeight) * f1).endVertex();
+        bufferbuilder.vertex((double)((float)centreX + width / 2.0F), (double)((float)centreY + height / 2.0F), (double)this.getBlitOffset()).uv((float)(u + texWidth) * f, (float)(v + texHeight) * f1).endVertex();
+        bufferbuilder.vertex((double)((float)centreX + width / 2.0F), (double)((float)centreY - height / 2.0F), (double)this.getBlitOffset()).uv((float)(u + texWidth) * f, (float)(v + 0) * f1).endVertex();
+        bufferbuilder.vertex((double)((float)centreX - width / 2.0F), (double)((float)centreY - height / 2.0F), (double)this.getBlitOffset()).uv((float)(u + 0) * f, (float)(v + 0) * f1).endVertex();
+        bufferbuilder.end();
+        BufferUploader.end(bufferbuilder);
+    }
 }

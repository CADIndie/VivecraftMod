--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -27,6 +27,7 @@
 import net.minecraft.Util;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.CriteriaTriggers;
+import net.minecraft.client.Minecraft;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -34,6 +35,7 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.network.Connection;
+import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
@@ -110,6 +112,8 @@
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PlayerRideableJumping;
+import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.ChatVisiblity;
@@ -147,9 +151,20 @@
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import net.optifine.reflect.Reflector;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.AimFixHandler;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.reflection.MCReflection;
+import io.netty.channel.Channel;
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener
 {
@@ -197,6 +212,20 @@
         this.player = p_9772_;
         p_9772_.connection = this;
         this.keepAliveTime = Util.getMillis();
+        
+        //Vivecraft
+        try
+        {
+        	((Channel)MCReflection.NetworkManager_channel.get(p_9771_)).pipeline().addBefore("packet_handler", "vr_aim_fix", new AimFixHandler(this.connection));
+        }
+        catch (Exception exception)
+        {
+        	if (!Reflector.fml_ModLoader.exists())
+        	{
+        		LOGGER.warn("{} failed adding VR aim fix", (Object)this.player.getName().getString());
+        	}
+        }
+        //
         p_9772_.getTextFilter().join();
     }
 
@@ -293,6 +322,8 @@
         {
             this.disconnect(new TranslatableComponent("multiplayer.disconnect.idling"));
         }
+
+        NetworkHelper.sendPosData(this.player);
     }
 
     public void resetPosition()
@@ -317,7 +348,7 @@
 
     public void disconnect(Component pTextComponent)
     {
-        this.connection.send(new ClientboundDisconnectPacket(pTextComponent), (p_9828_) ->
+        this.connection.send(new ClientboundDisconnectPacket(pTextComponent), (p_210161_2_) ->
         {
             this.connection.disconnect(pTextComponent);
         });
@@ -432,11 +463,17 @@
                 }
 
                 entity.absMoveTo(d3, d4, d5, f, f1);
+                //Forge
+                this.player.absMoveTo(d3, d4, d5, this.player.getYRot(), this.player.getXRot());
+                //
                 boolean flag2 = serverlevel.noCollision(entity, entity.getBoundingBox().deflate(0.0625D));
 
                 if (flag && (flag1 || !flag2))
                 {
                     entity.absMoveTo(d0, d1, d2, f, f1);
+                    //Forge
+                    this.player.absMoveTo(d3, d4, d5, this.player.getYRot(), this.player.getXRot());
+                    //
                     this.connection.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
@@ -453,7 +490,10 @@
 
     private boolean noBlocksAround(Entity p_9794_)
     {
-        return p_9794_.level.getBlockStates(p_9794_.getBoundingBox().inflate(0.0625D).expandTowards(0.0D, -0.55D, 0.0D)).allMatch(BlockBehaviour.BlockStateBase::isAir);
+    	//Forge is this ok?
+        //return p_9794_.level.getBlockStates(p_9794_.getBoundingBox().inflate(0.0625D).expandTowards(0.0D, -0.55D, 0.0D)).allMatch(BlockBehaviour.BlockStateBase::isAir);
+        return BlockPos.betweenClosedStream(p_9794_.getBoundingBox().inflate(0.0625D).expandTowards(0.0D, -0.55D, 0.0D)).allMatch(b -> p_9794_.level.getBlockState(b).isAir());
+        //
     }
 
     public void handleAcceptTeleportPacket(ServerboundAcceptTeleportationPacket pPacket)
@@ -1207,7 +1247,19 @@
 
         if (blockpos.getY() < i)
         {
-            if (this.awaitingPositionFromClient == null && this.player.distanceToSqr((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < 64.0D && serverlevel.mayInteract(this.player, blockpos))
+            double d0 = 8.0D;
+            //Forge
+            Object object = Reflector.call(Reflector.getFieldValue(Reflector.ForgeMod_REACH_DISTANCE), Reflector.RegistryObject_get);
+
+            if (object != null)
+            {
+                d0 = this.player.getAttribute((Attribute)object).getValue() + 3.0D;
+            }
+
+            d0 = d0 * d0;
+            //
+
+            if (this.awaitingPositionFromClient == null && this.player.distanceToSqr((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < d0 && serverlevel.mayInteract(this.player, blockpos))
             {
                 InteractionResult interactionresult = this.player.gameMode.useItemOn(this.player, serverlevel, itemstack, interactionhand, blockhitresult);
 
@@ -1323,9 +1375,9 @@
         {
             this.connection.send(pPacket, pFutureListeners);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            CrashReport crashreport = CrashReport.forThrowable(throwable, "Sending packet");
+            CrashReport crashreport = CrashReport.forThrowable(throwable1, "Sending packet");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Packet being sent");
             crashreportcategory.setDetail("Packet class", () ->
             {
@@ -1357,8 +1409,10 @@
 
     public void handleChat(ServerboundChatPacket pPacket)
     {
-        String s = StringUtils.normalizeSpace(pPacket.getMessage());
-
+        //String s = StringUtils.normalizeSpace(pPacket.getMessage());
+        //Forge -why?
+    	String s = org.apache.commons.lang3.StringUtils.normalizeSpace(pPacket.getMessage());
+        //
         for (int i = 0; i < s.length(); ++i)
         {
             if (!SharedConstants.isAllowedChatCharacter(s.charAt(i)))
@@ -1399,9 +1453,14 @@
                 String s1 = pPacket.getFiltered();
                 Component component = s1.isEmpty() ? null : new TranslatableComponent("chat.type.text", this.player.getDisplayName(), s1);
                 Component component1 = new TranslatableComponent("chat.type.text", this.player.getDisplayName(), s);
+    			//Forge
+                if(Reflector.ForgeHooks_onServerChatEvent.exists())
+                	component1 = (Component) Reflector.call(Reflector.ForgeHooks_onServerChatEvent, this, s, component1);
+                Component finalComponent = component1;
+                //
                 this.server.getPlayerList().broadcastMessage(component1, (p_184197_) ->
                 {
-                    return this.player.shouldFilterMessageTo(p_184197_) ? component : component1;
+                    return this.player.shouldFilterMessageTo(p_184197_) ? component : finalComponent;
                 }, ChatType.CHAT, this.player.getUUID());
             }
 
@@ -1527,7 +1586,9 @@
                     {
                         ItemStack itemstack = ServerGamePacketListenerImpl.this.player.getItemInHand(p_143679_).copy();
                         InteractionResult interactionresult = p_143680_.run(ServerGamePacketListenerImpl.this.player, entity, p_143679_);
-
+                        //Forge
+                        if (Reflector.call(Reflector.ForgeHooks_onInteractEntityAt, player, entity, entity.position(), p_143679_) != null) return;
+                        //
                         if (interactionresult.consumesAction())
                         {
                             CriteriaTriggers.PLAYER_INTERACTED_WITH_ENTITY.trigger(ServerGamePacketListenerImpl.this.player, itemstack, entity);
@@ -1790,6 +1851,130 @@
 
     public void handleCustomPayload(ServerboundCustomPayloadPacket pPacket)
     {
+        //Forge
+    	PacketUtils.ensureRunningOnSameThread(pPacket, this, this.player.getLevel());
+        Reflector.call(Reflector.NetworkHooks_onCustomPayload, pPacket, this.connection);
+        //
+        FriendlyByteBuf friendlybytebuf = (FriendlyByteBuf)MCReflection.CCustomPayloadPacket_data.get(pPacket);
+        ResourceLocation resourcelocation = (ResourceLocation)MCReflection.CCustomPayloadPacket_channel.get(pPacket);
+        String s = resourcelocation.getNamespace();
+        String s1 = resourcelocation.getPath();
+
+        if (s.equalsIgnoreCase("vivecraft") && s1.equalsIgnoreCase("data"))
+        {
+            int i = friendlybytebuf.readableBytes();
+            NetworkHelper.PacketDiscriminators networkhelper$packetdiscriminators = NetworkHelper.PacketDiscriminators.values()[friendlybytebuf.readByte()];
+            byte[] abyte = new byte[i - 1];
+            friendlybytebuf.readBytes(abyte);
+            ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.player.getUUID());
+
+            if (serverviveplayer == null && networkhelper$packetdiscriminators != NetworkHelper.PacketDiscriminators.VERSION)
+            {
+                return;
+            }
+
+            switch (networkhelper$packetdiscriminators)
+            {
+                case VERSION:
+                    String s2 = Minecraft.getInstance().minecriftVerString;
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.VERSION, s2));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.REQUESTDATA, new byte[0]));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.CLIMBING, new byte[] {1, 0}));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.TELEPORT, new byte[0]));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.CRAWL, new byte[0]));
+                    serverviveplayer = new ServerVivePlayer(this.player);
+                    NetworkHelper.vivePlayers.put(this.player.getUUID(), serverviveplayer);
+                    BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new DataInputStream(new ByteArrayInputStream(abyte))));
+
+                    try
+                    {
+                        String s3 = bufferedreader.readLine();
+
+                        if (s3.contains("NONVR"))
+                        {
+                            this.player.sendMessage(new TextComponent("NONVR: " + this.player.getDisplayName().getString()), this.player.getUUID());
+                            serverviveplayer.setVR(false);
+                        }
+                        else
+                        {
+                            this.player.sendMessage(new TextComponent("VR: " + this.player.getDisplayName().getString()), this.player.getUUID());
+                            serverviveplayer.setVR(true);
+                        }
+                    }
+                    catch (IOException ioexception)
+                    {
+                        ioexception.printStackTrace();
+                    }
+
+                    break;
+
+                case CONTROLLER0DATA:
+                    serverviveplayer.controller0data = abyte;
+                    break;
+
+                case CONTROLLER1DATA:
+                    serverviveplayer.controller1data = abyte;
+                    break;
+
+                case DRAW:
+                    serverviveplayer.draw = abyte;
+                    break;
+
+                case HEADDATA:
+                    serverviveplayer.hmdData = abyte;
+
+                case MOVEMODE:
+                case REQUESTDATA:
+                default:
+                    break;
+
+                case WORLDSCALE:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.worldScale = friendlybytebuf.readFloat();
+                    break;
+
+                case HEIGHT:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.heightscale = friendlybytebuf.readFloat();
+                    break;
+
+                case TELEPORT:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    float f = friendlybytebuf.readFloat();
+                    float f1 = friendlybytebuf.readFloat();
+                    float f2 = friendlybytebuf.readFloat();
+                    this.player.absMoveTo((double)f, (double)f1, (double)f2, this.player.getYRot(), this.player.getXRot());
+                    break;
+
+                case CLIMBING:
+                    this.player.fallDistance = 0.0F;
+                    this.aboveGroundTickCount = 0; //why were we not doing this
+                case ACTIVEHAND:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.activeHand = friendlybytebuf.readByte();
+
+                    if (serverviveplayer.isSeated())
+                    {
+                        serverviveplayer.activeHand = 0;
+                    }
+
+                    break;
+
+                case CRAWL:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.crawling = friendlybytebuf.readByte() != 0;
+
+                    if (serverviveplayer.crawling)
+                    {
+                        this.player.setPose(Pose.SWIMMING);
+                    }
+            }
+        }
     }
 
     public void handleChangeDifficulty(ServerboundChangeDifficultyPacket pPacket)
